#Speed: [ 0.7 : 3 ] m/s
import math
def reward_function(params):
    #################################################################################
    '''
    Example of using distance from the center
    '''

    # Read input variable
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']
    
    # Read input variables
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']

    # Set the speed threshold based your action space
    SPEED_THRESHOLD = 1.0

    # Penalize if the car is too far away from the center
    
    # Read input variables
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    abs_steering = abs(params['steering_angle'])
    

    # Initialize the reward with typical value
    reward = 1.0

    # Calculate the direction of the center line based on the closest waypoints
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]

    # Calculate the direction in radius, arctan2(dy, dx), the result is (-pi, pi) in radians
    track_direction=math.atan2(next_point[1]-prev_point[1],next_point[0] - prev_point[0])
    # Convert to degree
    track_direction = math.degrees(track_direction)


    # Calculate the difference between the track direction and the heading direction of the car
    direction_diff = abs(track_direction - heading)
    if direction_diff > 200:
        direction_diff = 360 - direction_diff

    # Penalize the reward if the difference is too large
    DIRECTION_THRESHOLD = 10.0
    if direction_diff > DIRECTION_THRESHOLD:
        reward *= 0.5


       
    marker_1 = 0.2 * track_width
    
    if distance_from_center <= marker_1:
        reward = 1.0
    
    else:
        reward = 1e-3  # likely crashed/ close to off track
        
   
        
    if not all_wheels_on_track:
        # Penalize if the car goes off track
        reward = 1e-3
    elif speed < SPEED_THRESHOLD:
        # Penalize if the car goes too slow
        reward = 1.0
    else:
        # High reward if the car stays on track and goes fast
        reward = 1.0    

    if all_wheels_on_track and (0.5*track_width - distance_from_center) >= 0.05:
        reward = 1.0
  
   
    ABS_STEERING_THRESHOLD = 15.0
    if abs_steering > ABS_STEERING_THRESHOLD:
       if speed < SPEED_THRESHOLD:
         reward *= 1.0
    ABS_STEERING_THRESHOLD = -15.0
    if abs_steering < ABS_STEERING_THRESHOLD:
       if speed < SPEED_THRESHOLD:
         reward *= 1.0

    return float(reward) 
    
    def straight_line_reward(current_reward, steering, speed):
        # Positive reward if the car is in a straight line going fast
        if abs(steering) < 0.1 and speed > 3:
            current_reward *= 1.2
        return current_reward
            
